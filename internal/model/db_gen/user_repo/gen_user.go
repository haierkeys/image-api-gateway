// /////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gorm_gen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
// /////////////////////////////////////////////////////////

package user_repo

import (
	"fmt"
	"time"

	"github.com/haierspi/golang-image-upload-service/global"
	"github.com/haierspi/golang-image-upload-service/internal/model"
	"github.com/haierspi/golang-image-upload-service/pkg/timef"

	"github.com/pkg/errors"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

func Connection() *gorm.DB {
	db := global.DBEngine
	db.Config.NamingStrategy = schema.NamingStrategy{
		TablePrefix:   "pre_", // 表名前缀
		SingularTable: true,   // 使用单数表名
	}
	db.AutoMigrate(&User{})
	return db
}

func NewModel() *User {
	return new(User)
}

type memberRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	whereRaw []struct {
		query  string
		values []interface{}
	}
	limit  int
	offset int
}

func NewQueryBuilder() *memberRepoQueryBuilder {
	return new(memberRepoQueryBuilder)
}

func (qb *memberRepoQueryBuilder) buildQuery() *gorm.DB {
	ret := Connection()
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, where2 := range qb.whereRaw {
		ret = ret.Where(where2.query, where2.values...)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (t *User) Create() (id int64, err error) {
	t.CreatedAt = timef.Now()
	db := Connection()
	if err = db.Model(t).Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Uid, nil
}

func (t *User) Save() (err error) {
	t.UpdatedAt = timef.Now()

	db := Connection()
	if err = db.Model(t).Save(t).Error; err != nil {
		return errors.Wrap(err, "update err")
	}
	return nil
}

func (qb *memberRepoQueryBuilder) Updates(m map[string]interface{}) (err error) {

	db := Connection()
	db = db.Model(&User{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

// 自减
func (qb *memberRepoQueryBuilder) Increment(column string, value int64) (err error) {

	db := Connection()
	db = db.Model(&User{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Update(column, gorm.Expr(column+" + ?", value)).Error; err != nil {
		return errors.Wrap(err, "increment err")
	}
	return nil
}

// 自增
func (qb *memberRepoQueryBuilder) Decrement(column string, value int64) (err error) {

	db := Connection()
	db = db.Model(&User{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Update(column, gorm.Expr(column+" - ?", value)).Error; err != nil {
		return errors.Wrap(err, "decrement err")
	}
	return nil
}

func (qb *memberRepoQueryBuilder) Delete() (err error) {

	db := Connection()
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&User{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *memberRepoQueryBuilder) Count() (int64, error) {
	var c int64
	res := qb.buildQuery().Model(&User{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *memberRepoQueryBuilder) First() (*User, error) {
	ret := &User{}
	res := qb.buildQuery().First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *memberRepoQueryBuilder) Get() ([]*User, error) {
	return qb.QueryAll()
}

func (qb *memberRepoQueryBuilder) QueryOne() (*User, error) {
	qb.limit = 1
	ret, err := qb.QueryAll()
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *memberRepoQueryBuilder) QueryAll() ([]*User, error) {
	var ret []*User
	err := qb.buildQuery().Find(&ret).Error
	return ret, err
}

func (qb *memberRepoQueryBuilder) Limit(limit int) *memberRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *memberRepoQueryBuilder) Offset(offset int) *memberRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *memberRepoQueryBuilder) WhereRaw(query string, values ...interface{}) *memberRepoQueryBuilder {
	vals := make([]interface{}, len(values))
	for i, v := range values {
		vals[i] = v
	}
	qb.whereRaw = append(qb.whereRaw, struct {
		query  string
		values []interface{}
	}{
		query,
		vals,
	})
	return qb
}

// ----------

func (qb *memberRepoQueryBuilder) WhereUid(p model.Predicate, value int64) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereUidIn(value []int64) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereUidNotIn(value []int64) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByUid(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`uid` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereNickname(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereNicknameIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereNicknameNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByNickname(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`nickname` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereAvatar(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatar", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereAvatarIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatar", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereAvatarNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatar", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByAvatar(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`avatar` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereMobile(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "mobile", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereMobileIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "mobile", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereMobileNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "mobile", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByMobile(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`mobile` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereName(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereNameIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereNameNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByName(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`name` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereIdcard(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "idcard", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereIdcardIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "idcard", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereIdcardNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "idcard", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByIdcard(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`idcard` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereIsValidate(p model.Predicate, value int32) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_validate", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereIsValidateIn(value []int32) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_validate", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereIsValidateNotIn(value []int32) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_validate", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByIsValidate(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`is_validate` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereOpenid(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "openid", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereOpenidIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "openid", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereOpenidNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "openid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByOpenid(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`openid` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereUnionid(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "unionid", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereUnionidIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "unionid", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereUnionidNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "unionid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByUnionid(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`unionid` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereGender(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "gender", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereGenderIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "gender", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereGenderNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "gender", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByGender(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`gender` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereLanguage(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "language", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereLanguageIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "language", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereLanguageNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "language", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByLanguage(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`language` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereCity(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "city", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereCityIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "city", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereCityNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "city", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByCity(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`city` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereProvince(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "province", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereProvinceIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "province", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereProvinceNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "province", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByProvince(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`province` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereCountry(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "country", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereCountryIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "country", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereCountryNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "country", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByCountry(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`country` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereAvatarUrl(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatar_url", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereAvatarUrlIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatar_url", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereAvatarUrlNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatar_url", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByAvatarUrl(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`avatar_url` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereSessionKey(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "session_key", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereSessionKeyIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "session_key", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereSessionKeyNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "session_key", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderBySessionKey(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`session_key` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereToken(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "token", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereTokenIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "token", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereTokenNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "token", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByToken(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`token` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereWeixinToken(p model.Predicate, value string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "weixin_token", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereWeixinTokenIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "weixin_token", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereWeixinTokenNotIn(value []string) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "weixin_token", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByWeixinToken(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`weixin_token` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereChangeNameNum(p model.Predicate, value int32) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "change_name_num", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereChangeNameNumIn(value []int32) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "change_name_num", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereChangeNameNumNotIn(value []int32) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "change_name_num", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByChangeNameNum(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`change_name_num` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereHannelsId(p model.Predicate, value int64) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "hannels_id", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereHannelsIdIn(value []int64) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "hannels_id", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereHannelsIdNotIn(value []int64) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "hannels_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByHannelsId(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`hannels_id` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereIsDeleted(p model.Predicate, value int32) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereIsDeletedIn(value []int32) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereIsDeletedNotIn(value []int32) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByIsDeleted(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`is_deleted` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereUpdatedAt(p model.Predicate, value time.Time) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByUpdatedAt(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`updated_at` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereCreatedAt(p model.Predicate, value time.Time) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereCreatedAtIn(value []time.Time) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByCreatedAt(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`created_at` "+order)
	return qb
}

func (qb *memberRepoQueryBuilder) WhereDeletedAt(p model.Predicate, value time.Time) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", p),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereDeletedAtIn(value []time.Time) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) WhereDeletedAtNotIn(value []time.Time) *memberRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *memberRepoQueryBuilder) OrderByDeletedAt(asc bool) *memberRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`deleted_at` "+order)
	return qb
}
